rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can read their own document.
    // - Authenticated users can create their own document (e.g., on signup if adapter doesn't fully handle it or for profile updates).
    // - Only the user themselves or an admin can update their document.
    // - Deletion of user documents is typically restricted or handled by backend functions.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && 
                      (request.auth.uid == userId || 
                       (request.auth.uid != null &&
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      // allow delete: if false; // Or specific admin/owner conditions
    }

    // Recordings Collection
    // - Users can create recordings (i.e., write metadata).
    // - Users can read their own recordings.
    // - Admins can read any recording (for moderation or support, if needed). -> Temporarily removed for simplification
    // - Updates/deletes might be restricted to user or admin. -> Temporarily owner-only
    match /recordings/{recordingId} {
      // User can create a recording if they are logged in and the recording's userId matches their own.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // User can read, update, or delete a recording if they are logged in and own the recording.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Scenarios Collection
    // - All authenticated users can read scenarios (to pick one for practice).
    // - Only admin users can create, update, or delete scenarios.
    match /scenarios/{scenarioId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                     request.auth.uid != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Personas Collection (Placeholder for future)
    // match /personas/{personaId} {
    //   allow read: if request.auth != null;
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }
  }
}